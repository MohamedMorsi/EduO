@page "/counter"
@using EduO.Web.HttpServices.Service
@attribute [Authorize(Roles = "Administrator")]


@*<AuthorizeView Roles="Administrator">
    <Authorized>
        The user: @context.User.FindFirst(ClaimTypes.Name).Value is authorized
        @context.User.Claims.Where("lambda expression goes here");
    </Authorized>
    <NotAuthorized>
        The User is not authorized
    </NotAuthorized>
</AuthorizeView>*@

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


@code {
    private int currentCount = 0;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Inject]
    public HttpInterceptorService Interceptor { get; set; }

    private async Task IncrementCount()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
            currentCount++;
        else
            currentCount--;
    }

    protected async override Task OnInitializedAsync()
    {
        Interceptor.RegisterEvent();   //=This means as long as we are on this component, every request will be intercepted and checked for the refresh token action.
        //await GetProducts();
    }

     //All the other methods in this class - Get, Sort, Search, Delete  =  we dispose of our event as soon as we navigate away from this component.
    public void Dispose() => Interceptor.DisposeEvent();
}
