@page "/courses/createcourse"

<h2>Create Course Form</h2>

<EditForm Model="@_course" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>

                    <MudTextField Label="Name" HelperText="'Name' is required field"
                                  @bind-Value="_course.Name" For="@(() => _course.Name)" />

                    <MudTextField Label="Desc" HelperText="'Desc' is required field"
                                  @bind-Value="_course.Desc" For="@(() => _course.Desc)" />

                @*    <MudSelect T="int?" @bind-Value="_course.CourseTypeId" Label="Course Type" Clearable="true" Required="true" Placeholder="Please Select" AnchorOrigin="Origin.BottomCenter">
                        @foreach(var courseType in CourseTypeDtoList)
                        {
                            <MudSelectItem Value="courseType.Id">@courseType.Name</MudSelectItem>
                        }
                    </MudSelect>*@

                @*    <MudSelect T="int?" @bind-Value="_course.GradeId" Label="Grade" Clearable="true" Required="true" Placeholder="Please Select" AnchorOrigin="Origin.BottomCenter">
                        @foreach(var grade in GradeDtoList)
                        {
                            <MudSelectItem Value="@grade.Id">@grade.Name</MudSelectItem>
                        }
                    </MudSelect>*@

                    <MudSelect T="int?" Label="Grade" Clearable="true" Required="true">
                        @foreach (var grade in GradeDtoList)
                        {
                            <MudSelectItem Value="@grade.Id" />
                        }
                    </MudSelect>

                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code {

    private int[] prices = { 4 , 4 , 3 , 21  };

    [Inject]
    public IBaseService<CourseDto> CourseService { get; set; }
    [Inject]
    public IBaseService<CourseTypeDto> CourseTypeService { get; set; }
    [Inject]
    public IBaseService<GradeDto> GradeService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private CourseDto _course = new CourseDto();

    public List<GradeDto> GradeDtoList { get; set; } = new List<GradeDto>();

    bool success;

    protected async override Task OnInitializedAsync()
    {
        GradeDtoList =await GradeService.GetAllAsync();
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await CourseService.CreateAsync(_course);
        success = true;
        StateHasChanged();
        NavigationManager.NavigateTo("/courses");
    }


}
