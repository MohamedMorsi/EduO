@if (ExClasses.Count > 0)
{
   <MudTable Items="@ExClasses.Take(10)" Hover="true" Breakpoint="Breakpoint.Sm" Loading="false" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Actions"> 
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" />
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Edit" />
        </MudTd>
    </RowTemplate>
</MudTable>
}
else
{
    <span>
        Loading exclass...
    </span>
}

@code {

    [Parameter]
    public List<ExClassDto> ExClasses { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IJSRuntime Js { get; set; }

    private void RedirectToUpdate(int id)
    {
        var url = Path.Combine($"/exclass/updateexclass/{id}");
        NavigationManager.NavigateTo(url);
    }

    private async Task Delete(int id)
    {
        var exclass = ExClasses.FirstOrDefault(p => p.Id.Equals(id));

        var confirmed = await Js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {exclass.Name} ExClass?");
        if (confirmed)
        {
            await OnDeleted.InvokeAsync(exclass.Id);
        }
    }

}
